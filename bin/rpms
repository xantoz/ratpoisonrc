#!/usr/bin/env ash
# -*- Mode: Shell-script -*-
set -euo pipefail

SCRIPT_PATH="$(realpath $0)"

rp_setenv_if_empty() {
    if [ $# -lt 2 ]; then
        echo_err "Too few arguments"
        return 1
    fi
    varname="$1"
    val="$2"
    if [ -z "${varname}" ]; then
        echo_err "Empty varname"
        return 2
    fi
    oldval="$(ratpoison -c "getenv ${varname}" || true)"
    if [ -z "${oldval}" ]; then
        ratpoison -c  "setenv ${varname} ${val}"
    fi
}

die() {
    echo "$@"
    exit 1
}

echo_err() {
    >&2 echo "$@"
}

error() {
    msg="ERROR: $*"
    echo_err "${msg}"
    ratpoison -c "echo ${msg}"
}

get_selected_screen() {
    # last column is 1 for the active screen, second column is the screen number
    ratpoison -c 'sdump' | awk 'BEGIN { RS="," } $NF==1 { print $2 }'
}

get_screen_ids_nc() {
    ratpoison -c 'sdump' | awk 'BEGIN { RS=","; ORS=" "; } { print $2 }'
}

get_screen_ids() {
    ratpoison -c 'getenv rpms_screen_id_list'
}

_rotational_sdump() {
    sdump_lines="$(ratpoison -c 'sdump' | tr ',' '\n')"
    first="$(echo "${sdump_lines}" | head -1 | sed 's/1$/0/')"
    last="$(echo "${sdump_lines}" | tail -1 | sed 's/1$/0/')"
    printf -- '%s\n%s\n%s\n' "${last}" "${sdump_lines}" "${first}"
}

get_next_screen() {
    if [ $(get_numscreens) -le 1 ]; then
        get_selected_screen
        return 0
    fi

    _rotational_sdump | awk '$NF==1 { getline; print $2 }'
}

get_prev_screen() {
    if [ $(get_numscreens) -le 1 ]; then
        get_selected_screen
        return 0
    fi

    _rotational_sdump | awk '$NF==1 { print f } { f=$2 }'
}

get_current_desktop() {
    screen=${1:-$(get_selected_screen)}
    ratpoison -c  "getenv rpms_screen_${screen}_current_desktop"
}

get_previous_desktop() {
    screen=${1:-$(get_selected_screen)}
    ratpoison -c "getenv rpms_screen_${screen}_previous_desktop"
}

get_numscreens_nc() {
    echo $(( $(ratpoison -c 'sdump' | (grep -so ',' || true) | wc -l) + 1 )) # number of commas in sdump + 1
}

get_numscreens() {
    ratpoison -c 'getenv rpms_numscreens'
}

enable_switchscreen_hook() {
    ratpoison -c 'addhook switchscreen rpms_switchscreen-hook'
}

disable_switchscreen_hook() {
    ratpoison -c 'remhook switchscreen rpms_switchscreen-hook'
}

switchscreen_hook() {
    # Guarantee that we always have the right group selected for the new screen
    screen=$(get_selected_screen)
    ratpoison \
        -c "gselect $(ratpoison-c "getenv rpms_screen_${screen}_current_desktop")" \
        -c "setenv rpms_previous_screen $(ratpoison -c 'getenv rpms_selected_screen')" \
        -c "setenv rpms_selected_screen ${screen}"
}

desktop_out_of_range() {
    desktop="$1"
    ! ([ ${desktop} -ge 0 ] && [ ${desktop} -lt $(ratpoison -c 'getenv rpms_desktop_count') ])
}

todesktop() {
    target="$1"
    if desktop_out_of_range ${target}; then
        error "Desktop ${target} out of range"
        return 1
    fi

    screen=$(get_selected_screen)
    current_desktop=$(ratpoison -c "getenv rpms_screen_${screen}_current_desktop")

    # Check if our target desktop already is displayed on another screen
    for i in $(get_screen_ids); do
        if [ $(ratpoison -c "getenv rpms_screen_${i}_current_desktop") -eq ${target} ]; then
            # TODO: variant (extra parameter?) that causes the screen to swap with each other herbstluftwm style?
            ratpoison \
                -c "echo [SWITCH] Desktop ${target} on screen ${i}" \
                -c "sselect $i"
            return 0
        fi
    done

    ratpoison \
        -c "setenv rpms_frames_${current_desktop} $(ratpoison -c fdump)" \
        -c "setenv rpms_screen_${screen}_previous_desktop ${current_desktop}" \
        -c "setenv rpms_previous_desktop ${current_desktop}" \
        -c "setenv rpms_screen_${screen}_current_desktop ${target}" \
        -c "gselect ${target}"

    frames="$(ratpoison -c "getenv rpms_frames_${target}")"
    if [ -z "${frames}" ] || [ "${frames}" = "undef" ]; then
        # No frames saved for this desktop yet, present emptyness
        ratpoison -c 'only' -c 'select -'
    else
        ratpoison -c "frestore ${frames}"
    fi
    ratpoison -c "echo Desktop ${target}"
}

screen_other() {
    ratpoison -c "sselect $(ratpoison -c getenv rpms_previous_screen)"
}

desktop_other() {
    screen=$(get_selected_screen)
    todesktop $(ratpoison -c "getenv rpms_screen_${screen}_previous_desktop")
}

# Same as desktop_other, but switch to the last desktop, disregarding which screen it was on
desktop_other_global() {
    todesktop $(ratpoison -c "getenv rpms_previous_desktop")
}

swap_screen() {
    swapto="$1"
    curscr="$(get_selected_screen)"

    if [ ${curscr} -eq ${swapto} ]; then
        error "Can't swap screen with itself"
        return 0
    fi
    curscr_desktop="$(ratpoison -c "getenv rpms_screen_${curscr}_current_desktop")"
    swapto_desktop="$(ratpoison -c "getenv rpms_screen_${swapto}_current_desktop")"
    curscr_fdump="$(ratpoison -c 'fdump')"
    swapto_fdump="$(ratpoison -c "fdump ${swapto}")"

    (
        trap enable_switchscreen_hook 0
        disable_switchscreen_hook  # call sselect without causing the hook to run

        # TODO: try dynamically constructing something in sfdump format so the layout change can be applied in one step
        ratpoison \
            -c "sselect ${swapto}" -c 'only' -c 'select -' -c "sselect ${curscr}" \
            -c "frestore ${swapto_fdump}" -c "sselect ${swapto}" -c "frestore ${curscr_fdump}" \
            -c "setenv rpms_screen_${curscr}_current_desktop ${swapto_desktop}" \
            -c "setenv rpms_screen_${swapto}_current_desktop ${curscr_desktop}" \
            -c "setenv rpms_previous_screen ${curscr}" \
            -c "setenv rpms_selected_screen ${swapto}"
    )
}

swap_screen_prev() {
    swap_screen "$(get_prev_screen)"
}

swap_screen_next() {
    swap_screen "$(get_next_screen)"
}

# Returns true if the desktop number is already active on some screen,
# or if the desktop number is out of range
desktop_used() {
    desktop="$1"
    if desktop_out_of_range ${desktop}; then
        return 1
    fi
    for i in $(get_screen_ids); do
        [ $(ratpoison -c "getenv rpms_screen_${i}_current_desktop") -eq ${desktop} ] && return 0
    done
    return 1
}

get_prev_desktop() {
    # a negative value means unable to find desktop
    desktop="$(( $(get_current_desktop) - 1 ))"
    while desktop_used $desktop; do
        desktop=$((desktop - 1))
    done
    echo ${desktop}
}

get_next_desktop() {
    # a value >= rpms_desktop_count means unable to find desktop
    desktop="$(( $(get_current_desktop) + 1 ))"
    while desktop_used $desktop; do
        desktop=$((desktop + 1))
    done
    echo ${desktop}
}

prevdesktop() {
    target=$(get_prev_desktop)
    if [ ${target} -ge 0 ]; then
        todesktop ${target}
    fi
}

nextdesktop() {
    target=$(get_next_desktop)
    if [ ${target} -lt $(ratpoison -c 'getenv rpms_desktop_count') ]; then
        todesktop ${target}
    fi
}

rpc() {
    ratpoison -c "$*"
}

init() {
    numscreens=$(get_numscreens_nc)
    screens=$(get_screen_ids_nc)
    desktop_count=${1:-12}
    [ ${desktop_count} -gt ${numscreens} ] || \
        die "Must have more virtual desktops than there are screens"

    rpc setenv rpms_desktop_count ${desktop_count}
    for i in $(seq 1 $((desktop_count - 1))); do
        rpc gnewbg $i || true
    done
    rpc alias rpms_todesktop exec "$SCRIPT_PATH todesktop"
    for i in $(seq 0 $((desktop_count - 1))); do
        rp_setenv_if_empty rpms_frames_$i undef
    done
    rpc bind "Escape" "rpms_todesktop 0"
    for i in $(seq 1 $((desktop_count - 1))); do
        rpc bind "F${i}" "rpms_todesktop ${i}"
    done
    rpc alias rpms_screen-other exec "$SCRIPT_PATH screen-other"
    rpc alias rpms_desktop-other exec "$SCRIPT_PATH desktop-other"
    rpc alias rpms_desktop-other-global exec "$SCRIPT_PATH desktop-other-global"
    rpc alias rpms_swap-screen exec "$SCRIPT_PATH swap-screen"
    rpc alias rpms_swap-screen-prev exec "$SCRIPT_PATH swap-screen-prev"
    rpc alias rpms_swap-screen-next exec "$SCRIPT_PATH swap-screen-next"
    rpc alias rpms_prevdesktop exec "$SCRIPT_PATH prevdesktop"
    rpc alias rpms_nextdesktop exec "$SCRIPT_PATH nextdesktop"
    rpc bind C-question rpms_screen-other
    rpc bind backslash rpms_screen-other
    rpc bind C-backslash rpms_screen-other
    rpc bind slash rpms_desktop-other
    rpc bind C-slash rpms_desktop-other-global
    rpc bind less rpms_prevdesktop
    rpc bind C-less rpms_prevdesktop
    rpc bind comma rpms_prevdesktop
    rpc bind C-comma rpms_prevdesktop
    rpc bind greater rpms_nextdesktop
    rpc bind C-greater rpms_nextdesktop
    rpc bind period rpms_nextdesktop
    rpc bind C-period rpms_nextdesktop

    rpc setenv rpms_numscreens ${numscreens}
    rpc setenv rpms_screen_id_list ${screens}
    screen=$(get_selected_screen)
    rpc setenv rpms_selected_screen ${screen}
    rpc setenv rpms_previous_screen ${screen}
    rp_setenv_if_empty rpms_previous_desktop 0
    for i in ${screens}; do
        # TODO: Think of a way to be intelligent here in the re-init scenario. (There could theoretically be collisions of current_desktop)
        rp_setenv_if_empty rpms_screen_${i}_current_desktop ${i}
        rp_setenv_if_empty rpms_screen_${i}_previous_desktop ${i}
    done
    # These two are basic ratpoison commands, and not aliases defined
    # by rpms, but lets give them nicer keybinds
    rpc bind bracketleft prevscreen
    rpc bind bracketright nextscreen
    rpc bind braceleft rpms_swap-screen-prev
    rpc bind braceright rpms_swap-screen-next

    rpc alias rpms_switchscreen-hook exec "$SCRIPT_PATH switchscreen-hook"
    enable_switchscreen_hook

    rpc alias rpms_current-desktop exec "$SCRIPT_PATH current-desktop"
    rpc alias rpms_identify-screens exec "$SCRIPT_PATH identify-screens"
    rpc bind d rpms_current-desktop
    rpc bind C-d rpms_identify-screens

    rpc alias rpms_gmove-here exec "$SCRIPT_PATH gmove-here"
    rpc alias rpms_gselect-current-desktop exec "$SCRIPT_PATH gselect-current-desktop"
    rpc alias rpms_all-windows exec $SCRIPT_PATH all-windows
    rpc bind W rpms_all-windows

    rpc alias rpms_windows-dmenu exec "$SCRIPT_PATH windows-dmenu"
    rpc alias rpms_windows-dmenu-global exec "$SCRIPT_PATH windows-dmenu-global"
    rpc bind C-w rpms_windows-dmenu
    rpc bind C-W rpms_windows-dmenu-global
    rpc bind M-w rpms_windows-dmenu-global
    # rpc bind C-M-w rpms_windows-dmenu-global

    echo_err "Init success"
}

# List all windows on all desktops, display on terminal
# TODO: indicate on what screen virtual desktop is displayed (if any)
all_windows_term() {
    current_desktop=$(get_current_desktop)
    previous_desktop=$(get_previous_desktop)
    desktop_count=$(ratpoison -c 'getenv rpms_desktop_count')

    (
        trap gselect_current_desktop 0
        for i in $(seq 0 $((desktop_count - 1))); do
            # [ "$(ratpoison -c "getenv invert_$i")" = 't' ] && echo -n 'I'
            if [ $i -eq $current_desktop ]; then
                echo "-----*Desktop ${i}*-----"
            elif [ $i -eq $previous_desktop ]; then
                echo "-----+Desktop ${i}+-----"
            else
                echo "------Desktop ${i}------"
            fi
            ratpoison -c "gselect $i"
            ratpoison -c 'windows' | sed 's/^/ /'
            echo
        done
    )
}

_list_all_windows() {
    desktop_count=$(ratpoison -c "getenv rpms_desktop_count")
    (
        trap gselect_current_desktop 0
        for i in $(seq 0 $((desktop_count - 1))); do
            ratpoison -c "gselect $i"
            ratpoison -c "windows" | grep -v 'No managed windows'
        done
    )
}

# Display count of windows managed by ratpoison, display on terminal
window_count_term() {
    _list_all_windows | wc -l
}

current_desktop_term() {
    screen=${1:-$(get_selected_screen)}
    current_desktop=$(get_current_desktop ${screen})
    previous_desktop=$(get_previous_desktop ${screen})
    echo "Desktop ${current_desktop}/${previous_desktop} (Screen: ${screen})"
}

current_desktop() {
    if [ $# -ge 1 ]; then
        ratpoison -c "echo $(current_desktop_term ${1})"
    else
        ratpoison -c "echo $(current_desktop_term)"
    fi
}

# a bit sketchy, since it changes the focused screen and causes all manner of things to flicker around.
# TODO: think of better way to do this (if neccesary use tool outside ratpoison)
identify_screens() {
    screen=$(get_selected_screen)
    for i in $(get_screen_ids); do
        if [ ${i} -ne ${screen} ]; then
            ratpoison -c "sselect ${i}"
            current_desktop ${i}
        fi
    done
    ratpoison -c "sselect ${screen}"
    current_desktop ${screen}
}

# List all windows on all desktops, display in ratpoison
all_windows() {
    # TODO: more terse representation?
    # Change font size temporarily so that we can see more entries
    oldfont=$(ratpoison -c 'set font')
    ratpoison -c 'set font unifont:size=8' -c "echo $(all_windows_term)" -c "set font ${oldfont}"
}

# Some more low-level-ish commands that we expose
gmove_here() {
    # Move focused window to group of current desktop
    ratpoison -c "gmove $(get_current_desktop)" # TODO: or should we use currently selected group, instead?
}

gselect_current_desktop() {
    ratpoison -c "gselect $(get_current_desktop)"
}

windows_dmenu() {
    ratpoison -c "select $(ratpoison -c 'windows' | dmenu -i -l 123 | grep -o '^[[:digit:]]*')"
}

windows_dmenu_global() {
    (
        trap gselect_current_desktop 0

        desktop_count=$(ratpoison -c "getenv rpms_desktop_count")
        windowlist="$(
            (for i in $(seq 0 $((desktop_count - 1))); do
                 ratpoison -c "gselect $i" -c 'windows' | sed "s/^/\\($i\\) /"
             done) | grep -v 'No managed windows')"
        echo "$windowlist" | \
            dmenu -i -l 123 | \
            perl -ne '/\((\d+)\)\s+(\d+)/; system "ratpoison -c gselect\\ $1 -c select\\ $2\n"'
    )
}

# usage/help
usage() {
    echo "Usage: <WRITE ME>"
}

(
flock -x 200
cmd=$1
shift
case "$cmd" in
    init)
        init "$@"
        ;;
    switchscreen-hook)
        switchscreen_hook
        ;;
    todesktop)
        todesktop "$@"
        ;;
    screen-other)
        screen_other
        ;;
    desktop-other)
        desktop_other
        ;;
    desktop-other-global)
        desktop_other_global
        ;;
    swap-screen)
        swap_screen "$@"
        ;;
    swap-screen-prev)
        swap_screen_prev
        ;;
    swap-screen-next)
        swap_screen_next
        ;;
    nextdesktop)
        nextdesktop
        ;;
    prevdesktop)
        prevdesktop
        ;;
    gmove-here)
        gmove_here
        ;;
    gselect-current-desktop)
        gselect_current_desktop
        ;;
    all-windows)
        all_windows
        ;;
    all-windows-term)
        all_windows_term
        ;;
    window-count-term)
        window_count_term
        ;;
    current-desktop)
        current_desktop
        ;;
    current-desktop-term)
        current_desktop_term
        ;;
    identify-screens)
        identify_screens
        ;;
    windows-dmenu)
        windows_dmenu
        ;;
    windows-dmenu-global)
        windows_dmenu_global
        ;;
    *)
        usage
        exit 1
esac
) 200> /tmp/rpms.lock
